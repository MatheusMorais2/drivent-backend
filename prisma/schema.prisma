// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(255)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Session    Session[]
  Enrollment Enrollment[]
  UserTicket UserTicket[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                 Int        @id @default(autoincrement())
  title              String     @db.VarChar(255)
  backgroundImageUrl String     @db.VarChar(255)
  logoImageUrl       String     @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  Ticket             Ticket[]
  Optional           Optional[]
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  cpf       String    @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  User      User      @relation(fields: [userId], references: [id])
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Ticket {
  id         Int          @id @default(autoincrement())
  eventId    Int
  Event      Event        @relation(fields: [eventId], references: [id])
  type       String       @unique
  price      Int
  UserTicket UserTicket[]
  Optional   Optional[]
}

model Optional {
  id         Int          @id @default(autoincrement())
  ticketId   Int
  Ticket     Ticket       @relation(fields: [ticketId], references: [id])
  type       String       @unique
  price      Int
  UserTicket UserTicket[]
  Event      Event?       @relation(fields: [eventId], references: [id])
  eventId    Int?
}

model UserTicket {
  id               Int                @id @default(autoincrement())
  userId           Int                @unique
  User             User               @relation(fields: [userId], references: [id])
  ticketId         Int
  Ticket           Ticket             @relation(fields: [ticketId], references: [id])
  optionalId       Int?
  Optional         Optional?          @relation(fields: [optionalId], references: [id])
  PaymentDetails   PaymentDetails[]
  HotelReservation HotelReservation[]
}

model PaymentDetails {
  id           Int        @id @default(autoincrement())
  userTicketId Int
  UserTicket   UserTicket @relation(fields: [userTicketId], references: [id])
  totalValue   Int
  paymentDate  DateTime
  isPaid       Boolean    @default(false)
}

model Hotel {
  id               Int                @id @default(autoincrement())
  name             Int                @unique
  AccomdationTypes AccomodationType[]
  TotalRooms       Int
  HotelRoom        HotelRoom[]
}

model HotelRoom {
  id               Int                @id @default(autoincrement())
  hotelId          Int
  Hotel            Hotel              @relation(fields: [hotelId], references: [id])
  availableBeds    Int
  HotelReservation HotelReservation[]
}

model HotelReservation {
  id           Int        @id @default(autoincrement())
  userTicketId Int        @unique
  UserTicket   UserTicket @relation(fields: [userTicketId], references: [id])
  hotelRoomId  Int
  HotelRoom    HotelRoom  @relation(fields: [hotelRoomId], references: [id])
}

enum TicketType {
  Presential
  Online
}

enum AccomodationType {
  Single
  Double
  Triple
}
